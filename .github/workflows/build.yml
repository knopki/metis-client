---
# yamllint disable rule:line-length
name: Test, build and release

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - master

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        if: ${{ !env.ACT }} # skip during local actions testing
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]

      - name: Run tests
        run: |
          pytest --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        # Use always() to always run this step to publish test results
        # when there are test failures
        if: always()
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml

  build-on-pr:
    name: Build on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        if: ${{ !env.ACT }} # skip during local actions testing

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[release]

      - name: Build
        run: flit build

  release:
    name: Release on push to master branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        if: ${{ !env.ACT }} # skip during local actions testing
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[release]

      - name: Create bump and changelog
        id: cz
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog_increment_filename: ${{ runner.temp }}/CHANGELOG-INCREMENT.md
          push: true

      - name: Print new version
        run: echo "Bumped to version ${{ steps.cz.outputs.version }}"

      - name: Build
        run: flit build

      - name: Stop if no bump
        continue-on-error: true
        # will fail if not on exact tag
        run: git describe --tags --exact-match

      - name: Create Release Draft
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: ${{ steps.cz.outputs.version }}
          body_path: ${{ runner.temp }}/CHANGELOG-INCREMENT.md
          fail_on_unmatched_files: true
          files: dist/*
